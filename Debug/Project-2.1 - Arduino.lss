
Project-2.1 - Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095f  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081d  00000000  00000000  00000be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f0  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000108  00000000  00000000  00001c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001da7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define F_CPU 16E6			// CPU frequency
#include <util/delay.h>

int main(void)
{
	ser_init();
  96:	0e 94 68 00 	call	0xd0	; 0xd0 <ser_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	83 ed       	ldi	r24, 0xD3	; 211
  9e:	90 e3       	ldi	r25, 0x30	; 48
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0xa>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x14>
  aa:	00 00       	nop
	_delay_ms(1000);
	
	DDRB=0; // read (pin 0+1)
  ac:	14 b8       	out	0x04, r1	; 4
	DDRD=4+8; // write (pin 2+3)
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	8a b9       	out	0x0a, r24	; 10
	PORTD|=4; // LED 1 is on by default
  b2:	5a 9a       	sbi	0x0b, 2	; 11
	
//	char word = ser_readln();
	while(1) {
		
		ser_writeln("Arduino\n");
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 7e 00 	call	0xfc	; 0xfc <ser_writeln>
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	83 ed       	ldi	r24, 0xD3	; 211
  c0:	90 e3       	ldi	r25, 0x30	; 48
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x2c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x36>
  cc:	00 00       	nop
  ce:	f2 cf       	rjmp	.-28     	; 0xb4 <main+0x1e>

000000d0 <ser_init>:
#define UBBRVAL 51

// Serial init function, enables data-transport in both directions
void ser_init() {
	// Set baud rate
	UBRR0H = 0;
  d0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBBRVAL;
  d4:	83 e3       	ldi	r24, 0x33	; 51
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// disable U2X mode
	UCSR0A = 0;
  da:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// enable TX and RX
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	// set frame format: asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ea:	08 95       	ret

000000ec <ser_write>:

void ser_write(uint8_t data)
{
	// Wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
  ec:	e0 ec       	ldi	r30, 0xC0	; 192
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	90 81       	ld	r25, Z
  f2:	95 ff       	sbrs	r25, 5
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <ser_write+0x4>
	// Send data
	UDR0 = data;
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  fa:	08 95       	ret

000000fc <ser_writeln>:
}

void ser_writeln(char *line)
{
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
	uint8_t lenght = strlen(line);
 104:	fc 01       	movw	r30, r24
 106:	01 90       	ld	r0, Z+
 108:	00 20       	and	r0, r0
 10a:	e9 f7       	brne	.-6      	; 0x106 <ser_writeln+0xa>
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	de 2f       	mov	r29, r30
 110:	d8 1b       	sub	r29, r24
	for (uint8_t p=0; p < lenght ; p++)
 112:	51 f0       	breq	.+20     	; 0x128 <ser_writeln+0x2c>
 114:	8c 01       	movw	r16, r24
 116:	c0 e0       	ldi	r28, 0x00	; 0
	{
		char c = line[p];
		ser_write(c);
 118:	f8 01       	movw	r30, r16
 11a:	81 91       	ld	r24, Z+
 11c:	8f 01       	movw	r16, r30
 11e:	0e 94 76 00 	call	0xec	; 0xec <ser_write>
}

void ser_writeln(char *line)
{
	uint8_t lenght = strlen(line);
	for (uint8_t p=0; p < lenght ; p++)
 122:	cf 5f       	subi	r28, 0xFF	; 255
 124:	dc 13       	cpse	r29, r28
 126:	f8 cf       	rjmp	.-16     	; 0x118 <ser_writeln+0x1c>
	{
		char c = line[p];
		ser_write(c);
	}
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
