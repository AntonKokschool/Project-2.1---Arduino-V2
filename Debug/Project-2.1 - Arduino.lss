
Project-2.1 - Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000018c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a98  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089b  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000582  00000000  00000000  00001663  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000472  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000231  00000000  00000000  000021ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000023eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_11>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8e:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <yellowLedOff>:
}
void redLedOn(){
	PORTD |= 0x80;				// Turns on red led
}
void redLedOff(){
	PORTD &= ~0x80;				// Turns off red led
  96:	ef e6       	ldi	r30, 0x6F	; 111
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	10 82       	st	Z, r1
  9e:	08 95       	ret

000000a0 <setupLed>:
}
void setupLed()
{
	DDRD = 0x20 | 0x40 | 0x80;
  a0:	80 ee       	ldi	r24, 0xE0	; 224
  a2:	8a b9       	out	0x0a, r24	; 10
	// initialize timer1 
	cli();						// disable all interrupts
  a4:	f8 94       	cli
	TCCR1A = 0;
  a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;
  aa:	e1 e8       	ldi	r30, 0x81	; 129
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	TCNT1  = 0;
  b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	OCR1A = 31250;				// compare match register 16MHz/256/2Hz=
  b8:	82 e1       	ldi	r24, 0x12	; 18
  ba:	9a e7       	ldi	r25, 0x7A	; 122
  bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= (1 << WGM12);		// CTC mode
  c4:	80 81       	ld	r24, Z
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12);		// 256 prescaler
  ca:	80 81       	ld	r24, Z
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	80 83       	st	Z, r24
	yellowLedOff();				
  d0:	0e 94 4b 00 	call	0x96	; 0x96 <yellowLedOff>
	sei();           // enable all interrupts
  d4:	78 94       	sei
  d6:	08 95       	ret

000000d8 <__vector_11>:
}


ISR(TIMER1_COMPA_vect)          // timer compare interrupt service routine
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
	PORTD ^= 0x40;				// invert yellow led to on/off state
  e6:	9b b1       	in	r25, 0x0b	; 11
  e8:	80 e4       	ldi	r24, 0x40	; 64
  ea:	89 27       	eor	r24, r25
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <main>:
#define F_CPU 16E6			// CPU frequency
#include <util/delay.h>

int main(void)
{
	ser_init();
  fc:	0e 94 90 00 	call	0x120	; 0x120 <ser_init>
	setupLed();
 100:	0e 94 50 00 	call	0xa0	; 0xa0 <setupLed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	83 ed       	ldi	r24, 0xD3	; 211
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0xe>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x18>
 114:	00 00       	nop
	_delay_ms(1000);
//char buffer[200];
	while(1)
	{
		ser_writeln("Default");
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 a6 00 	call	0x14c	; 0x14c <ser_writeln>
 11e:	fb cf       	rjmp	.-10     	; 0x116 <main+0x1a>

00000120 <ser_init>:
#define UBBRVAL 51

// Serial init function, enables data-transport in both directions
void ser_init() {
	// Set baud rate
	UBRR0H = 0;
 120:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBBRVAL;
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// disable U2X mode
	UCSR0A = 0;
 12a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// enable TX and RX
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 12e:	88 e1       	ldi	r24, 0x18	; 24
 130:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	// set frame format: asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 13a:	08 95       	ret

0000013c <ser_write>:

void ser_write(uint8_t data)
{
	// Wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 13c:	e0 ec       	ldi	r30, 0xC0	; 192
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	90 81       	ld	r25, Z
 142:	95 ff       	sbrs	r25, 5
 144:	fd cf       	rjmp	.-6      	; 0x140 <ser_write+0x4>
	// Send data
	UDR0 = data;
 146:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 14a:	08 95       	ret

0000014c <ser_writeln>:
}

void ser_writeln(char *line)
{
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
	uint8_t lenght = strlen(line);
 154:	fc 01       	movw	r30, r24
 156:	01 90       	ld	r0, Z+
 158:	00 20       	and	r0, r0
 15a:	e9 f7       	brne	.-6      	; 0x156 <ser_writeln+0xa>
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	de 2f       	mov	r29, r30
 160:	d8 1b       	sub	r29, r24
	for (uint8_t p=0; p < lenght ; p++)
 162:	51 f0       	breq	.+20     	; 0x178 <ser_writeln+0x2c>
 164:	8c 01       	movw	r16, r24
 166:	c0 e0       	ldi	r28, 0x00	; 0
	{
		char c = line[p];
		ser_write(c);
 168:	f8 01       	movw	r30, r16
 16a:	81 91       	ld	r24, Z+
 16c:	8f 01       	movw	r16, r30
 16e:	0e 94 9e 00 	call	0x13c	; 0x13c <ser_write>
}

void ser_writeln(char *line)
{
	uint8_t lenght = strlen(line);
	for (uint8_t p=0; p < lenght ; p++)
 172:	cf 5f       	subi	r28, 0xFF	; 255
 174:	dc 13       	cpse	r29, r28
 176:	f8 cf       	rjmp	.-16     	; 0x168 <ser_writeln+0x1c>
	{
		char c = line[p];
		ser_write(c);
	}
	ser_write(0x0A);
 178:	8a e0       	ldi	r24, 0x0A	; 10
 17a:	0e 94 9e 00 	call	0x13c	; 0x13c <ser_write>
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
