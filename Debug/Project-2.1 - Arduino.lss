
Project-2.1 - Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099c  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081d  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000405  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000230  00000000  00000000  00001d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001f91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#define F_CPU 16E6			// CPU frequency
#include <util/delay.h>

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	c8 5c       	subi	r28, 0xC8	; 200
  8a:	d1 09       	sbc	r29, r1
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	ser_init();
  96:	0e 94 61 00 	call	0xc2	; 0xc2 <ser_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	83 ed       	ldi	r24, 0xD3	; 211
  9e:	90 e3       	ldi	r25, 0x30	; 48
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2a>
  aa:	00 00       	nop
	_delay_ms(1000);
char buffer[200];
	while(1)
	{
		
		ser_readln(buffer, 200);
  ac:	68 ec       	ldi	r22, 0xC8	; 200
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	ce 01       	movw	r24, r28
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	0e 94 9a 00 	call	0x134	; 0x134 <ser_readln>
		ser_writeln(buffer);
  b8:	ce 01       	movw	r24, r28
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	0e 94 77 00 	call	0xee	; 0xee <ser_writeln>
  c0:	f5 cf       	rjmp	.-22     	; 0xac <main+0x2c>

000000c2 <ser_init>:
#define UBBRVAL 51

// Serial init function, enables data-transport in both directions
void ser_init() {
	// Set baud rate
	UBRR0H = 0;
  c2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBBRVAL;
  c6:	83 e3       	ldi	r24, 0x33	; 51
  c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// disable U2X mode
	UCSR0A = 0;
  cc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	// enable TX and RX
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	// set frame format: asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  dc:	08 95       	ret

000000de <ser_write>:

void ser_write(uint8_t data)
{
	// Wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
  de:	e0 ec       	ldi	r30, 0xC0	; 192
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	90 81       	ld	r25, Z
  e4:	95 ff       	sbrs	r25, 5
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <ser_write+0x4>
	// Send data
	UDR0 = data;
  e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ec:	08 95       	ret

000000ee <ser_writeln>:
}

void ser_writeln(char *line)
{
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
	uint8_t lenght = strlen(line);
  f6:	fc 01       	movw	r30, r24
  f8:	01 90       	ld	r0, Z+
  fa:	00 20       	and	r0, r0
  fc:	e9 f7       	brne	.-6      	; 0xf8 <ser_writeln+0xa>
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	de 2f       	mov	r29, r30
 102:	d8 1b       	sub	r29, r24
	for (uint8_t p=0; p < lenght ; p++)
 104:	51 f0       	breq	.+20     	; 0x11a <ser_writeln+0x2c>
 106:	8c 01       	movw	r16, r24
 108:	c0 e0       	ldi	r28, 0x00	; 0
	{
		char c = line[p];
		ser_write(c);
 10a:	f8 01       	movw	r30, r16
 10c:	81 91       	ld	r24, Z+
 10e:	8f 01       	movw	r16, r30
 110:	0e 94 6f 00 	call	0xde	; 0xde <ser_write>
}

void ser_writeln(char *line)
{
	uint8_t lenght = strlen(line);
	for (uint8_t p=0; p < lenght ; p++)
 114:	cf 5f       	subi	r28, 0xFF	; 255
 116:	dc 13       	cpse	r29, r28
 118:	f8 cf       	rjmp	.-16     	; 0x10a <ser_writeln+0x1c>
	{
		char c = line[p];
		ser_write(c);
	}
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <ser_read>:

// Serial read function in C

char ser_read() {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
 124:	e0 ec       	ldi	r30, 0xC0	; 192
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 23       	and	r24, r24
 12c:	ec f7       	brge	.-6      	; 0x128 <ser_read+0x4>
	return UDR0;
 12e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 132:	08 95       	ret

00000134 <ser_readln>:

// Serial read line function in C (from computer to Arduino)

void ser_readln(char *line, uint8_t bufsize) {
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	8c 01       	movw	r16, r24
	uint8_t p=0;
 140:	c0 e0       	ldi	r28, 0x00	; 0
		c=ser_read();
		if (c!='\n') {
			line[p++]=c;
		}
		line[p]='\0';
	} while ((c!='\n') && (p<bufsize-1));
 142:	e6 2e       	mov	r14, r22
 144:	f1 2c       	mov	r15, r1
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	e8 1a       	sub	r14, r24
 14a:	f1 08       	sbc	r15, r1
 14c:	01 c0       	rjmp	.+2      	; 0x150 <ser_readln+0x1c>
	uint8_t p=0;
	char c;
	do {
		c=ser_read();
		if (c!='\n') {
			line[p++]=c;
 14e:	c2 2f       	mov	r28, r18

void ser_readln(char *line, uint8_t bufsize) {
	uint8_t p=0;
	char c;
	do {
		c=ser_read();
 150:	0e 94 92 00 	call	0x124	; 0x124 <ser_read>
		if (c!='\n') {
 154:	8a 30       	cpi	r24, 0x0A	; 10
 156:	81 f0       	breq	.+32     	; 0x178 <ser_readln+0x44>
			line[p++]=c;
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	2c 0f       	add	r18, r28
 15c:	f8 01       	movw	r30, r16
 15e:	ec 0f       	add	r30, r28
 160:	f1 1d       	adc	r31, r1
 162:	80 83       	st	Z, r24
		}
		line[p]='\0';
 164:	82 2f       	mov	r24, r18
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	f8 01       	movw	r30, r16
 16a:	e8 0f       	add	r30, r24
 16c:	f9 1f       	adc	r31, r25
 16e:	10 82       	st	Z, r1
	} while ((c!='\n') && (p<bufsize-1));
 170:	8e 15       	cp	r24, r14
 172:	9f 05       	cpc	r25, r15
 174:	64 f3       	brlt	.-40     	; 0x14e <ser_readln+0x1a>
 176:	04 c0       	rjmp	.+8      	; 0x180 <ser_readln+0x4c>
	do {
		c=ser_read();
		if (c!='\n') {
			line[p++]=c;
		}
		line[p]='\0';
 178:	f8 01       	movw	r30, r16
 17a:	ec 0f       	add	r30, r28
 17c:	f1 1d       	adc	r31, r1
 17e:	10 82       	st	Z, r1
	} while ((c!='\n') && (p<bufsize-1));
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
